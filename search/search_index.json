{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guides","text":"<p>Welcome! You've discovered the Guides section!</p> <p>Here, you'll embark on a journey through the magical realm of tutorials. Explore and uncover the secrets of this enchanted domain!</p> <p>Or go back to our Homepage</p>"},{"location":"#vitruatop","title":"vitrua.top","text":""},{"location":"Kubernetes%20Dungeon/01_Pods/","title":"The Pod","text":""},{"location":"Kubernetes%20Dungeon/01_Pods/#objective","title":"Objective","text":"<p>Learn the basic configuration of a Kubernetes pod by observing a cute dragon pod.</p>"},{"location":"Kubernetes%20Dungeon/01_Pods/#storytime","title":"Storytime","text":"<p>In the mystical realm of Vitrua, there dwelled a revered scientist whose companion was a venerable dragon in the twilight of its existence. Determined to extend the dragon's waning years, the scientist delved into the arcane arts of longevity. Initially, he succeeded in encapsulating the essence of the dragon within a mesmerizing image, a tapestry of intricate layers. However, it was only when this image was ensconced within a container, a mystical orb, that true transformation occurred, imbuing the dragon with a vitality beyond its natural state.</p> <p>The dragon was still sad, as it had troubles interacting with the external world from it's container, so the scientist had to find a solution to facilitate the dragon's interaction with the world outside its confines. Through relentless experimentation, he devised a remarkable exoskeleton using a deceptively simple engineering blueprint:</p>"},{"location":"Kubernetes%20Dungeon/01_Pods/#pod-basic-yaml","title":"Pod basic yaml","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: dragon-pod\n  labels:\n    type: dragon-app\nspec:\n  containers:\n  - name: dragon-container\n    image: dragon-image:latest\n    ports:\n    - containerPort: 443\n      protocol: TCP\n</code></pre>"},{"location":"Kubernetes%20Dungeon/01_Pods/#components-explanation","title":"Components explanation","text":"<p>The scientist has made quite the simple but effective blueprint. Let's break down the YAML structure:</p> <ol> <li> <p><code>apiVersion: v1</code>: This line specifies the API version being used to ensure compatibility with the cluster, which in this case is version 1 of the Kubernetes API. It's analogous to specifying the version of a software application.</p> </li> <li> <p><code>kind: Pod</code>: Here, a Kubernetes Pod is being defined. A Pod is the smallest deployable unit in Kubernetes, representing a single instance of a running process. This Pod likely encapsulates the environment for the dragon's consciousness and interaction.</p> </li> <li> <p><code>metadata</code>: This section provides metadata about the Pod, including its name and labels.</p> <ul> <li> <p><code>name: dragon-pod</code>: This line specifies the name of the Pod, which is \"dragon-pod\". This name is how Kubernetes will refer to and manage this specific instance of the Pod.</p> </li> <li> <p><code>labels</code>: Labels are key-value pairs used to organize and select subsets of objects in Kubernetes. Here, the Pod is labeled with <code>type: dragon-app</code>, indicating that it belongs to a category of applications related to dragons.</p> </li> </ul> </li> <li> <p><code>spec</code>: This section specifies the desired state for the Pod, including its containers and their configuration.</p> <ul> <li> <p><code>containers</code>: This subsection defines the containers that should be launched within the Pod.</p> <ul> <li> <p><code>name: dragon-container</code>: This line assigns a name to the container within the Pod. In this case, it's named \"dragon-container\", representing the vessel for the dragon's consciousness.</p> </li> <li> <p><code>image: dragon-image:latest</code>: Here, the image for the container is specified. The container will be created using the Docker image named \"dragon-image\" with the tag \"latest\". This image likely contains the necessary software and environment for the dragon's consciousness to operate within the container.</p> </li> <li> <p><code>ports</code>: This subsection specifies the ports that should be exposed by the container.</p> <ul> <li> <p><code>- containerPort: 443</code>: This line indicates that the container should expose port 443, which is commonly used for HTTPS traffic. In the story, this port might be used for communication or interaction between the dragon and external systems.</p> </li> <li> <p><code>protocol: TCP</code>: This line specifies the protocol to be used for communication on the exposed port. In this case, it's TCP (Transmission Control Protocol), a common protocol used for reliable communication over networks.</p> </li> </ul> </li> </ul> </li> </ul> </li> </ol> <p>Overall, this YAML file describes the configuration for a Kubernetes Pod named \"dragon-pod\", which contains a single container named \"dragon-container\" running the \"dragon-image\" Docker image. The container exposes port 443 for TCP communication, likely facilitating interactions between the dragon's consciousness and external systems in the Land of Vitrua.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/","title":"Services: ClusterIp, NodePort, LoadBalancer, ExternalName","text":""},{"location":"Kubernetes%20Dungeon/02_Services/#objective","title":"Objective","text":"<p>Learn and get practice with the different types of kubernetes services.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#story-time","title":"Story time","text":"<p>Once upon a time, three intrepid souls roamed the land: Brave Ben, Resourceful Rina, and Fearless Fred. One fateful day, they set their sights on the legendary Cluster Castle, a fabled dungeon rumored to conceal secrets of immense power and knowledge.</p> <p>Approaching the castle's entrance, they resolved to compete in their quest for the coveted treasures within. Each determined to claim the prized bounty first.</p> <p>As they ventured forth, they diverged onto separate paths, destined for an unexpected encounter with the mystical guardians: ClusterIP, NodePort, LoadBalancer, and ExternalName.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#clusterip","title":"ClusterIP","text":"<p>Brave Ben, opting for a solitary journey into the depths, utilized his teleportation magic to navigate the labyrinthine tunnels. Amidst the maze, he encountered ClusterIP, a spectral guide. This entity ensured seamless communication within the dungeon's confines, shielding him from external interference. The aid of ClusterIP was akin to possessing an exclusive map of the tunnels, accessible only to those within its bounds.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#nodeport","title":"NodePort","text":"<p>Meanwhile, Resourceful Rina circled the castle walls until she stumbled upon a concealed door. Upon entering, she was greeted by NodePort, the stalwart guardian. NodePort facilitated external access to specific chambers within the dungeon, acting as a direct bridge between the interior and the outside world. It served as a key to unlock designated areas, granting entry to predetermined zones.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#loadbalancer","title":"LoadBalancer","text":"<p>Finally Fearless Fred decided to boldly march through the main entrance, confronting a massive gate guarded by the imposing LoadBalancer. This formidable gatekeeper permitted numerous adventurers to access the dungeon's chambers. The LoadBalancer represented the necessity for a broader entry point, providing an accessible map to guide all who sought exploration within.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#externalname","title":"ExternalName","text":"<p>In the shadows, a lesser-known sorcerer, ExternalName, watched over a hidden passage leading to a realm beyond the dungeon's confines. This sorcerer acted as a conduit to an external service, allowing adventurers to access resources located outside the dungeon's domain. ExternalName served as a gateway to distant lands, offering a glimpse into worlds beyond imagination.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#conclusion","title":"Conclusion","text":"<p>Though taking different routes, ClusterIP, NodePort, LoadBalancer, and ExternalName guided the adventurers through the Cluster Castle, each ensuring access to its treasures while safeguarding its secrets with their protective measures. The four adventurers all emerged victorious, and returned laden with newfound knowledge and riches.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#exercise-managing-kubernetes-services-clusterip-nodeport-loadbalancer-and-externalname","title":"Exercise: Managing Kubernetes Services - ClusterIP, NodePort, LoadBalancer, and ExternalName","text":"<p>Objective: The objective of this exercise is to gain hands-on experience in managing different types of Kubernetes services: ClusterIP, NodePort, LoadBalancer, and ExternalName.</p> <p>Requirements: - Access to a Kubernetes cluster (locally installed or cloud-based) - kubectl command-line tool installed and configured to communicate with the Kubernetes cluster</p> <p>Instructions: 1. Create a ClusterIP Service:     - Use either a YAML configuration file or the command line to create a ClusterIP service to connect an app to a port.</p> <ol> <li> <p>Create a NodePort Service:</p> <ul> <li>Define a NodePort service to connect an app to a port, allowing external access by specifying a node port.</li> </ul> </li> <li> <p>Create a Basic LoadBalancer Service:</p> <ul> <li>Establish a basic LoadBalancer service to connect an app to a port.</li> </ul> </li> <li> <p>Create an ExternalName Service:</p> <ul> <li>Set up an ExternalName service to map a service to a DNS name.</li> </ul> </li> <li> <p>Confirm Service Creation:</p> <ul> <li>Verify that the services have been created correctly.</li> </ul> </li> <li> <p>Edit a Service:</p> <ul> <li>Modify or add a port, or link to a different element in at least one of the services.</li> </ul> </li> <li> <p>Clean Up Resources:</p> <ul> <li>Remove resources once the exercise is completed to prevent unnecessary costs or cluttering of the Kubernetes cluster.</li> </ul> </li> </ol> <p>Example Solution Steps:</p> <p>Assuming you have a Kubernetes cluster set up and a sample application deployed named \"my-app\":</p> <ol> <li> <p>Create ClusterIP Service: <pre><code>kubectl create service clusterip my-app-clusterip --tcp=80:8080\n</code></pre></p> </li> <li> <p>Create NodePort Service: <pre><code>kubectl create service nodeport my-app-nodeport --tcp=80:8080 --node-port=30000\n</code></pre></p> </li> <li> <p>Create LoadBalancer Service: <pre><code>kubectl create service loadbalancer my-app-loadbalancer --tcp=80:8080\n</code></pre></p> </li> <li> <p>Create ExternalName Service: <pre><code>kubectl create service externalname my-app-external --external-name=example.com\n</code></pre></p> </li> <li> <p>Verify Service Creation: <pre><code>kubectl get services\n</code></pre></p> </li> <li> <p>Edit a Service: <pre><code>kubectl edit svc my-app-clusterip\n</code></pre></p> </li> <li> <p>Clean Up Resources: <pre><code>kubectl delete service my-app-clusterip my-app-nodeport my-app-loadbalancer my-app-external\n</code></pre></p> </li> </ol> <p>These steps should provide a hands-on experience in managing various types of Kubernetes services and familiarize you with their configurations and functionalities.</p> <p>To get a full insight of the services, their characteristics and yaml files configuration, you can find here the full official documentation. </p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/","title":"Git Basic Workflow","text":""},{"location":"Misc%20Magic/01_Git_Basic_workflow/#objective","title":"Objective","text":"<p>Learn a basic workflow for social coding with git.</p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/#storytime","title":"Storytime","text":"<p>Once upon a time in the enchanted land of Vitrua, there lived a wizard named Wizzle. Wizzle was not your ordinary wizard; he was part of an order of fellow wizards and sorcerers who shared all their spells through a big cauldron. One day, Wizzle got an idea to upgrade the Fire spell, and he extracted a magical paper named <code>fire.spell</code> from the cauldron. </p> <pre><code>git clone https://github.com/vitrua/spellbook\n</code></pre> <p>Inscribed on the paper was the spell to conjure flames - a simple yet powerful \"Fire\" spell. Wizzle was excited to make it even more powerful.</p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/#the-spellcasting-ritual","title":"The Spellcasting Ritual:","text":"<ol> <li> <p>Create a New Branch - Fireball:</p> <ul> <li>Wizzle opened his enchanted terminal and invoked the Git spell to create a new branch named \"ball\":  <pre><code>git branch ball\n</code></pre></li> <li>With a flick of his wand, he switched to the \"fireball\" branch:  <pre><code>git checkout ball\n</code></pre></li> </ul> </li> <li> <p>Update the Spell - Fireball:</p> <ul> <li>Wizzle opened the magical <code>fire.spell</code> paper using his text-editor visualization spell.</li> <li>He modified the incantation from <code>Fire</code> to <code>Fireball</code>, bringing the new spell to life.</li> <li>Wizzle added the updated spell to the magical Git cauldron. <pre><code>git add fire.spell\n</code></pre></li> <li>With a wave of his hand, he committed the changes, letting the other wizards know what you can do with the new spell:  <pre><code>git commit -m \"Cast Fireball spell\"\n</code></pre></li> </ul> </li> <li> <p>Merge the Fireball Magic:</p> <ul> <li>Satisfied with the powerful Fireball spell, Wizzle decided to merge it into the main spellbook. He switched back to the main branch:  <pre><code>git checkout main\n</code></pre></li> <li>He merged the Fireball magic into the main spellbook:  <pre><code>git merge fireball\n</code></pre></li> </ul> </li> </ol> <p>The Grand Finale:</p> <p>With a sense of accomplishment, Wizzle pushed the updated main spellbook to the magical cauldron:  <pre><code>git push origin main\n</code></pre> His fellow wizards and sorcerers, connected through the magical network, marveled at the newfound powers of the Fireball spell.</p> <p>And so, in the land of Vitrua, Wizzle the Spellcaster continued to weave his magical Git commands, creating powerful spells and enchantments for the entire magical community.</p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/#magical-git-commands-summary","title":"Magical Git Commands Summary:","text":"<ul> <li><code>git branch &lt;branch_name&gt;</code>: Create a new branch.</li> <li><code>git checkout &lt;branch_name&gt;</code>: Switch to a branch.</li> <li><code>sed -i 's/Fire/Fireball/' fire.spell</code>: Update spell text.</li> <li><code>git add fire.spell</code>: Add changes to the staging area.</li> <li><code>git commit -m \"Commit message\"</code>: Commit changes.</li> <li><code>git merge &lt;branch_name&gt;</code>: Merge changes from another branch.</li> <li><code>git push origin &lt;branch_name&gt;</code>: Push changes to a remote repository.</li> </ul> <p>And so, the tale of Wizzle the Git Spellcaster goes down in the magical scrolls of Vitrua, inspiring wizards and developers alike to wield the power of Git for enchanting collaborative creations.</p>"},{"location":"Misc%20Magic/02_Cow_Fortune/","title":"Cowsay Fortune","text":""},{"location":"Misc%20Magic/02_Cow_Fortune/#objective","title":"Objective","text":"<p>Being greeted by a cow predicting your fortune every time you open a bash terminal. </p>"},{"location":"Misc%20Magic/02_Cow_Fortune/#example","title":"Example","text":"<pre><code> ___________________________________\n&lt; Beware of low-flying butterflies. &gt;\n -----------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre>"},{"location":"Misc%20Magic/02_Cow_Fortune/#storytime","title":"Storytime","text":"<p>Fortune-teller cow wasn't known for her milk production,</p> <p>but for her uncanny ability to see the future. </p> <p>Farmers flocked to her pasture, eagerly awaiting a swish of her tail </p> <p>(left meant sunshine, right meant rain). </p>"},{"location":"Misc%20Magic/02_Cow_Fortune/#installation","title":"Installation","text":"<ol> <li> <p>Install fortune and cowsay</p> <p>First, you need to ensure that both <code>fortune</code> and <code>cowsay</code> are installed on your system. You can do this using your package manager. For example, on Ubuntu or Debian-based systems, you can use <code>apt</code>:</p> <pre><code>sudo apt update\nsudo apt install fortune cowsay\n</code></pre> <p>For other Linux distributions, you might use <code>yum</code>, <code>dnf</code>, or another package manager appropriate to your system.</p> </li> <li> <p>Modify your .bashrc file</p> <p>Once you have <code>fortune</code> and <code>cowsay</code> installed, you can modify your <code>.bashrc</code> file to display a random fortune each time you open a new terminal window or tab.</p> <p>Open your <code>.bashrc</code> file in a text editor. You can do this with the following command:</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>Scroll to the bottom of the file, and add the following lines:</p> <pre><code># Display a random fortune with cowsay when opening a new terminal\nif [ -x /usr/games/cowsay -a -x /usr/games/fortune ]; then\n  fortune | cowsay\nfi\n</code></pre> <p>Save the file by pressing <code>Ctrl + O</code>, then press <code>Enter</code> to confirm, and exit Nano by pressing <code>Ctrl + X</code>.</p> </li> <li> <p>Test it out</p> <p>Open a new terminal window or tab, and you should see a random fortune displayed in a speech bubble created by a cow! Each time you open a new terminal, you'll see a different fortune.</p> </li> </ol> <p>That's it! You've successfully installed <code>fortune</code> and <code>cowsay</code> on your Bash shell and configured it to display a random fortune each time you open a new terminal session.</p>"},{"location":"OSpace/01_Basic_Linux/","title":"Basic Linux Workflow","text":""},{"location":"OSpace/01_Basic_Linux/#objective","title":"Objective","text":"<p>Learn commands for basic Linux operations from terminal by following a penguin in Outer Space. </p>"},{"location":"OSpace/01_Basic_Linux/#introduction","title":"Introduction","text":"<p>Meet Pulsar Penguin, the brave astronaut quietly floating in his spaceship in outer space. As he taps with his fins on the control panel keyboard, his spacecraft is suddenly damaged by a small meteor. Trained to stay calm in such situations, he begins to navigate through the dire scenario.</p>"},{"location":"OSpace/01_Basic_Linux/#prerequisites","title":"Prerequisites","text":"<p>To follow along, you'll need:</p> <ul> <li>Access to a Linux-based system or terminal emulator.</li> </ul>"},{"location":"OSpace/01_Basic_Linux/#pulsars-directories","title":"Pulsar's Directories","text":"<pre><code>engine\n\u251c\u2500\u2500\u2500mounted\n\u2502   \u251c\u2500\u2500\u2500propeller.broken.part\n\u2502   \u2514\u2500\u2500\u2500jet.part\n\u2514\u2500\u2500\u2500spare\n    \u251c\u2500\u2500\u2500jet.new.part\n    \u2514\u2500\u2500\u2500propeller.new.part\n</code></pre>"},{"location":"OSpace/01_Basic_Linux/#linux-commands-in-action","title":"Linux Commands in Action","text":""},{"location":"OSpace/01_Basic_Linux/#navigating-and-managing-files","title":"Navigating and Managing Files","text":"<ul> <li> <p>Calmly, Pulsar begins repair operations by determining his current location with the 'print working directory' command:   <pre><code>pwd\n</code></pre></p> </li> <li> <p>Discovering he's in the /engine directory, he confirms its contents with the 'list' command:   <pre><code>ls\n</code></pre></p> </li> <li> <p>Hearing strange noises from the 'mounted' directory, he investigates further using the 'change directory' command:   <pre><code>cd mounted\n</code></pre></p> </li> <li> <p>He finds a broken file, 'propeller.broken.part', and swiftly creates a new directory using 'make directory' to store parts temporarily:   <pre><code>mkdir temporary\n</code></pre></p> </li> <li> <p>Returning to the 'engine' level:   <pre><code>cd ..\n</code></pre></p> </li> <li> <p>He easily makes a 'copy' of the spare part:   <pre><code>cp spare/propeller.new.part mounted/propeller.new.part\n</code></pre></p> </li> <li> <p>Revisiting the 'mounted' components, he renames the new part while 'moving' it:   <pre><code>mv propeller.new.part propeller.part\n</code></pre></p> </li> <li> <p>After completing the repairs, he cleans up the debris by 'removing' unnecessary files:   <pre><code>rm propeller.broken.part\nrm -r temporary\n</code></pre></p> </li> </ul>"},{"location":"OSpace/01_Basic_Linux/#system-management","title":"System Management","text":"<ul> <li> <p>Facing a moment of panic when the new part doesn't work due to incorrect permissions, Pulsar temporarily grants full access using the 'change mode' command:   <pre><code>chmod -R 777 /engine/mounted\n</code></pre></p> </li> <li> <p>Encountering an error, he elevates his privileges using the 'super user do' command:   <pre><code>sudo chmod -R 777 /engine/mounted\n</code></pre></p> </li> </ul>"},{"location":"OSpace/01_Basic_Linux/#communication-and-troubleshooting","title":"Communication and Troubleshooting","text":"<ul> <li> <p>With the spaceship stabilized, Pulsar performs a final check to ensure all parts are accounted for using 'global regular expression print':   <pre><code>grep part\n</code></pre></p> </li> <li> <p>Before resuming his journey, he consults the manual one last time:   <pre><code>man pwd\n</code></pre></p> </li> </ul>"},{"location":"OSpace/01_Basic_Linux/#linux-survival-summary","title":"Linux Survival Summary:","text":"<ul> <li><code>pwd</code>: Get the path to the current working directory.</li> <li><code>ls</code>: List directory contents. <code>ls -lah</code> for more information.</li> <li><code>cd &lt;directory_name&gt;</code>: Change directory. <code>cd ..</code> to go back to a higher level.</li> <li><code>mkdir &lt;directory_name&gt;</code>: Create a new directory.</li> <li><code>cp &lt;path_original_file&gt; &lt;path_destination_file&gt;</code>: Copy a file.</li> <li><code>mv &lt;path_original_file&gt; &lt;path_destination_file&gt;</code>: Move a file.</li> <li><code>rm &lt;file_path&gt;</code>: Remove a file. <code>rm -rf &lt;directory_path&gt;</code>: Remove a directory and everything inside it forcefully.</li> <li><code>chmod &lt;permissions&gt; &lt;file_name&gt;</code>: Manage permissions.</li> <li><code>sudo &lt;command&gt;</code>: Execute a command as a superuser (root).</li> <li><code>grep &lt;pattern&gt; &lt;file_name&gt;</code>: Search for a pattern in files.</li> </ul>"},{"location":"OSpace/01_Basic_Linux/#conclusion","title":"Conclusion","text":"<p>Pulsar's journey demonstrates how mastering basic Linux commands can be crucial in critical situations. By familiarizing yourself with these commands, you too can navigate through the complexities of Linux systems with confidence and resilience.</p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/","title":"Authentication, new project and basic commands","text":""},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#objective","title":"Objective","text":"<p>Learn how to authenticate, create new projects, and some basic commands in Openshift. Enter the Openshift Castle.</p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#prerequisites","title":"Prerequisites","text":"<p>To embark on this adventure, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#introduction","title":"Introduction","text":"<p>In the vast landscape of the digital realm, where clusters of containers flourish like bustling kingdoms, there lies the imposing fortress of Openshift. Built upon the foundation of Kubernetes, this castle stands as a bastion of security and scalability, protecting its treasures with unwavering vigilance.</p> <p>Our hero, a brave adventurer seeking knowledge and mastery, stands before the gates of Openshift. The castle looms above, its architecture intricate and imposing, a testament to the power it holds within.</p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#authentication-gates","title":"Authentication Gates","text":"<p>Before venturing forth, our hero must authenticate at the castle gates. With the <code>oc login</code> command, he present their credentials: <pre><code>oc login &lt;cluster-url&gt;\n</code></pre></p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#forging-new-projects","title":"Forging New Projects","text":"<p>A strange sensation courses through our hero's veins as they enter the castle, as if the fortress were under their command. The first thing noticed is the multitude of different wings within the castle, each isolated from the others. With newfound powers, our hero invokes the creation of a new project to carve out a new realm: <pre><code>oc new project &lt;my-app&gt;\n</code></pre></p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#commanding-the-castle","title":"Commanding the Castle","text":"<p>Adorning the walls are inscriptions in a mysterious language. Armed with the knowledge of oc commands, our hero delves deeper into the castle's inner workings: <pre><code>oc cluster-info\noc api-versions\noc get clusteroperator\noc get pod\noc get pod &lt;pod_name&gt;\noc get pod &lt;pod_name&gt; -o yaml\noc get pod &lt;pod_name&gt; -o json\noc get deploy &lt;deploy_name&gt; -o wide\noc get all\noc describe &lt;resource_type&gt; &lt;resource_name&gt;\noc explain &lt;jsonpath_identifier&gt;\noc explain &lt;jsonpath_identifier&gt; --recursive\noc create -f &lt;pod.yaml&gt;\noc status --suggest\noc delete &lt;resource_type&gt; &lt;resource_name&gt;\n</code></pre> For instance: <pre><code>oc explain pods.spec.containers.resources\n</code></pre> These commands unveil the secrets of the castle's infrastructure and its inhabitants.</p> <p>To make these commands influence a different wing of the castle, than the one where he is in that moment, our hero needs to add the option <code>--namespace</code> or <code>-n</code> to the instruction: <pre><code>oc get pod -n &lt;namespace&gt;\n</code></pre></p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#token-of-entry-oauth","title":"Token of Entry - OAuth","text":"<p>For those who seek passage via OAuth, the castle offers tokens of entry: <pre><code>oc login --token=sha256-BW...fE2 --server=https://api.eg.vitrua.top:6443\n</code></pre> These tokens grant access to the castle's inner sanctums.</p>"},{"location":"OpenShift%20Castle/01_authentication_new_project_basics/#conclusion","title":"Conclusion","text":"<p>And thus, the hero took his first steps inside the castle.</p>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/","title":"Exploring API Resources","text":""},{"location":"OpenShift%20Castle/02_exploring_api_resources/#objective","title":"Objective","text":"<p>Discover and explore the API resources available within Openshift to understand the landscape of its capabilities. Learn to navigate in the OpenShift realm.</p>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of discovery, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/#introduction","title":"Introduction","text":"<p>As we venture deeper into the heart of the Openshift castle, we uncover the API resources, the very fabric that defines the realm's architecture and functionality. These resources represent the essence of every component within the castle, guiding its operations and interactions.</p>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/#viewing-api-resources","title":"Viewing API Resources","text":"<p>The API resource objects serve as blueprints for the intended state of every entity in the cluster. Similar to their counterparts in the realm of Kubernetes, these commands offer insights into the castle's inner workings: <pre><code>oc api-resources\n</code></pre> You can refine and organize the results using additional flags: <pre><code>oc api-resources --namespaced=true --api-group apps --sort-by name\n</code></pre></p>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/#openshift-main-resource-types","title":"Openshift Main Resource Types","text":""},{"location":"OpenShift%20Castle/02_exploring_api_resources/#buildconfig-architectural-blueprints","title":"BuildConfig: Architectural Blueprints","text":"<p>In the grand design of the Openshift castle, the BuildConfig stands as the architect's blueprint, defining the intricate process of constructing container images from source code stored in Git repositories. It is the cornerstone of continuous integration and delivery workflows, laying the foundation for innovation and evolution within Openshift projects.</p>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/#deploymentconfig-strategic-deployments","title":"DeploymentConfig: Strategic Deployments","text":"<p>Within the fortified walls of Openshift, the DeploymentConfig serves as a strategic map, guiding the deployment and management of sets of containers within pods. With features encompassing scaling and deployment strategies, it orchestrates the movement of troops across the battlefield of the cluster. In Openshift 4.5, it yields to Deployment objects, heralding a new era of enhanced features and flexibility, yet its legacy remains ingrained in the castle's history.</p>"},{"location":"OpenShift%20Castle/02_exploring_api_resources/#routes-pathways-of-navigation","title":"Routes: Pathways of Navigation","text":"<p>Like ancient pathways leading through the labyrinthine corridors of the Openshift castle, Routes are the DNS hostnames recognized by the Openshift router. They serve as the entry points for accessing applications and microservices, guiding travelers through the bustling streets and bustling squares of the cluster. With each route mapped and each journey embarked upon, they facilitate the seamless flow of traffic within Openshift's intricate network of pathways and passages.</p> <p>Embark on this journey of exploration through the API resources of Openshift, unraveling its intricacies and unlocking its potential.</p>"},{"location":"OpenShift%20Castle/03_extracting_config_data/","title":"Data Extraction from Configurations","text":""},{"location":"OpenShift%20Castle/03_extracting_config_data/#objective","title":"Objective","text":"<p>Master the art of extracting data from YAML representations of resources within the Openshift castle, unveiling insights and unraveling complexities.</p>"},{"location":"OpenShift%20Castle/03_extracting_config_data/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of data extraction, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/03_extracting_config_data/#introduction","title":"Introduction","text":"<p>As we delve deeper into the depths of the Openshift castle, we uncover hidden treasures within the YAML representations of its resources. These data-rich files hold the key to understanding the inner workings of the castle's components, offering a glimpse into its architecture and functionality.</p>"},{"location":"OpenShift%20Castle/03_extracting_config_data/#extracting-data-from-yamls","title":"Extracting Data from YAMLs","text":"<p>Unlock the potential of data extraction with commands designed to parse YAML representations into a tabular format: <pre><code>oc get pods \\\n-o custom-columns=PodName:\".metadata.name\",\\\nContainerName:\"spec.containers[].name\",\\\nPhase:\"status.phase\",\\\nIP:\"status.podIP\",\\\nPorts:\"spec.containers[].ports[].containerPort\"\n</code></pre></p>"},{"location":"OpenShift%20Castle/03_extracting_config_data/#format-output-with-jsonpath","title":"Format output with JSONPath","text":"<p>For formatted output, harness the power of JSONPath expressions: <pre><code>oc get pods \\\n-o jsonpath='{range .items[]}{\"Pod Name: \"}{.metadata.name}\n{\"Container Names:\"}{.spec.containers[].name}\n{\"Phase: \"}{.status.phase}\n{\"IP: \"}{.status.podIP}\n{\"Ports: \"}{.spec.containers[].ports[].containerPort}\n{\"Pod Start Time: \"}{.status.startTime}{\"\\n\"}{end}'\n</code></pre></p> <p>Unlock the hidden insights within the YAML representations of Openshift resources, and empower yourself with the knowledge to navigate its intricate architecture with confidence.</p>"},{"location":"OpenShift%20Castle/04_examining_cluster_metrics/","title":"Examine Cluster Metrics","text":""},{"location":"OpenShift%20Castle/04_examining_cluster_metrics/#objective","title":"Objective","text":"<p>Examining cluster metrics, revealing the heartbeat of the operations of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/04_examining_cluster_metrics/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of exploration, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/04_examining_cluster_metrics/#introduction","title":"Introduction","text":"<p>As we journey further into the heart of the Openshift castle, we uncover the realm's hidden secrets through the examination of cluster metrics. These metrics serve as the pulse of the castle, offering glimpses into its inner workings and resource utilization.</p>"},{"location":"OpenShift%20Castle/04_examining_cluster_metrics/#examining-cluster-metrics","title":"Examining Cluster Metrics","text":"<p>To peer into the total CPU usage of all pods within the cluster, our adventurers employ the following command: <pre><code>oc adm top pods -A --sum\n</code></pre> For a more focused inquiry into a single pod's CPU usage, they utilize the command: <pre><code>oc adm top pods &lt;pod_name&gt; -n &lt;namespace&gt; --containers\n</code></pre></p>"},{"location":"OpenShift%20Castle/04_examining_cluster_metrics/#metrics-from-interface","title":"Metrics from interface","text":"<p>Within the stronghold's grand halls, adventurers find themselves drawn to the Home -&gt; Overview section of the web interface, where the castle's metrics are displayed like ancient tapestries, meticulously sorted by resource utilization. Here, amidst the hustle and bustle of the castle's daily activities, they gain a fleeting glimpse of the main consumers within its walls, providing a quick overview of the kingdom's vitality.</p> <p>Yet, for those intrepid souls yearning for deeper insights and exploration, a path awaits within the Observe -&gt; Metrics section. Here, amidst the solemn grandeur of the castle's observatory, Prometheus queries can be executed like incantations, summoning forth insights from the depths of time. Through the arcane language of time-series graphs, adventurers unlock the secrets hidden within the castle's vast expanse of data and metrics.</p> <p>Embark on this journey of discovery, as we unravel the mysteries concealed within the labyrinthine corridors of Openshift's castle, and illuminate the path to enlightenment for all who dare to venture forth.</p>"},{"location":"OpenShift%20Castle/05_get_events_and_troubleshooting/","title":"Exploring Cluster Events and Troubleshooting","text":""},{"location":"OpenShift%20Castle/05_get_events_and_troubleshooting/#objective","title":"Objective","text":"<p>Delve into the realm of Openshift's cluster events and troubleshooting, illuminating the path to understanding and resolution within the fortress's walls.</p>"},{"location":"OpenShift%20Castle/05_get_events_and_troubleshooting/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of exploration and discovery, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/05_get_events_and_troubleshooting/#introduction","title":"Introduction","text":"<p>As we venture deeper into the fortified confines of the Openshift citadel, we encounter the realm of cluster events and troubleshooting. Here, amidst the ebb and flow of activity, lies a treasure trove of insights and solutions waiting to be unearthed.</p>"},{"location":"OpenShift%20Castle/05_get_events_and_troubleshooting/#get-cluster-events","title":"Get Cluster Events","text":"<p>Adventurers have the power to unveil the chronicles of the cluster through commands like: <pre><code>oc get events -n &lt;namespace&gt; --sortby .metadata.creationTimestamp\n</code></pre> Openshift boasts a monitoring stack anchored by Prometheus, residing within the 'openshift-monitoring' namespace. Powered by the Prometheus platform and Alertmanager, it stands as a sentinel, ever vigilant over the citadel's affairs.</p>"},{"location":"OpenShift%20Castle/05_get_events_and_troubleshooting/#check-node-status-and-troubleshooting","title":"Check Node Status and Troubleshooting","text":"<p>Armed with knowledge and determination, explorers can scrutinize the general status of the cluster and delve deeper into its inner workings with commands such as: <pre><code>oc cluster-info\noc get nodes\noc get node &lt;NODE_NAME&gt; -o jsonpath=*'{\"Allocatable:\\n\"}{.status.allocatable}{\"\\n\\n\"}{\"Capacity:\\n\"}{.status.capacity}{\"\\n\"}'\noc get node &lt;NODE_NAME&gt; -o json | jq '.status.conditions'\noc adm node-logs &lt;NODE_NAME&gt; -u &lt;COMPONENT_NAME&gt; --tail 10\n</code></pre> For those brave enough to seek resolution in the face of adversity, the path of the troubleshooter beckons. Activate the debug session and peer into the heart of the node: <pre><code>oc debug node/&lt;NODE_NAME&gt;\n</code></pre> Within the confines of the debug session, adventurers can confirm the activity of services with commands like: <pre><code># To run binaries in the host's executable path\nchroot /host\n# To confirm that the services are active\nfor SERVICES in kubelet crio; do echo ---- $SERVICES ---- ;\nsystemctl is-active $SERVICES ; echo \"\"; done\n</code></pre> Similar procedures can be employed for delving into the workings of pods, unraveling the threads of mystery woven within the citadel's walls.</p> <p>Embark on this journey of discovery, as we illuminate the shadows cast by the veil of uncertainty, and emerge victorious in the quest for knowledge and resolution within the timeless bastion of Openshift's citadel.</p>"},{"location":"OpenShift%20Castle/06_pods_creation_and_management/","title":"Pods Creation and Management","text":""},{"location":"OpenShift%20Castle/06_pods_creation_and_management/#objective","title":"Objective","text":"<p>Learn the art of creating and managing pods within the bastion of the Openshift citadel, laying the groundwork for your digital domains.</p>"},{"location":"OpenShift%20Castle/06_pods_creation_and_management/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of creation and mastery, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/06_pods_creation_and_management/#introduction","title":"Introduction","text":"<p>As we lay the cornerstone of our digital domains within the fortified confines of the Openshift citadel, we delve into the realm of pod creation and management. Here, amidst the hum of activity, like the rooms of a castle, lies the little foundations upon which our containerized realms shall thrive.</p>"},{"location":"OpenShift%20Castle/06_pods_creation_and_management/#pods-creation","title":"Pods Creation","text":"<p>The creation of pods, the very crucible of containerization, is an art mastered through the commands of 'kubectl' or 'oc CLI'. With the <code>run</code> command, we breathe life into our digital entities: <pre><code>oc run &lt;RESOURCE/NAME&gt; --image &lt;IMAGE&gt; [options]\noc run &lt;RESOURCE/NAME&gt; --image &lt;IMAGE&gt; --command -- cmd &lt;arg1 ... argN&gt;\n</code></pre> To commence an interactive session within the pod's container, the <code>-it</code> option is invoked: <pre><code>oc run -it my-app --image docker.io/library/busybox --command -- /bin/bash\n</code></pre> Further options allow for fine-tuning the creation process, specifying restart policies, environment variables, and automatic deletion after the session's conclusion: <pre><code>kubectl run -it my-app --rm --image docker.io/library/busybox --env MY_PASSWORD=P455w@rd --restart Never --command -- date\n</code></pre> In the realm of Openshift, containers created by regular users are subject to the constraints imposed by the Security Context Constraints controller, ensuring a safe environment.</p>"},{"location":"OpenShift%20Castle/06_pods_creation_and_management/#executing-commands-in-running-pod","title":"Executing commands in running pod","text":"<p>When a pod is already in motion, commands can still be executed within its confines using <code>exec</code>: <pre><code>oc exec &lt;RESOURCE/NAME&gt; -- &lt;COMMAND&gt; [args...] [options]\n</code></pre> For an interactive session, the <code>-i</code> and <code>-t</code> flags once again guide our path. In multi-container pods, the <code>-c</code> or <code>--container=</code> flag designates the specific container for command execution.</p> <p>Embark on this journey of creation and management, as we forge the foundations of our digital realms within the hallowed halls of the Openshift citadel.</p>"},{"location":"OpenShift%20Castle/07_container_logs/","title":"Explore Container Logs","text":""},{"location":"OpenShift%20Castle/07_container_logs/#objective","title":"Objective","text":"<p>Uncover the secrets held within the logs of containers, shedding light on the activities and events transpiring within the walls of the Openshift citadel.</p>"},{"location":"OpenShift%20Castle/07_container_logs/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of exploration and revelation, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/07_container_logs/#introduction","title":"Introduction","text":"<p>As we delve into the depths of the Openshift citadel, we turn our attention to the archives of container logs. Here, amidst the echoes of past events, lies a wealth of information waiting to be discovered and deciphered.</p>"},{"location":"OpenShift%20Castle/07_container_logs/#container-logs","title":"Container Logs","text":"<p>The logs of a container, akin to the chronicles of history, provide insights into the activities and events within. To retrieve these logs, adventurers employ the following command with various options: <pre><code>oc logs &lt;pod_name&gt; [options]\n</code></pre> - <code>-l</code> or <code>--selector=''</code>: Filters objects based on label key:value constraint. - <code>--tail=</code>: Specifies the number of lines of logs to display. - <code>-c</code> or <code>--container=</code>: Useful when multiple containers exist in a pod. - <code>-f</code> or <code>--follow=</code>: Streams logs for a container. - <code>-p</code> or <code>--previous=true</code>: Prints logs for a previous container instance in the pod, if available.</p>"},{"location":"OpenShift%20Castle/07_container_logs/#attach-to-pods","title":"Attach to Pods","text":"<p>For a more immersive experience, the <code>attach</code> command allows adventurers to connect to and start an interactive session on a running container within a pod: <pre><code>oc attach my-app -it\n</code></pre></p> <p>Embark on this journey of exploration and revelation, as we illuminate the archives of the Openshift citadel and uncover the secrets hidden within its container logs.</p>"},{"location":"OpenShift%20Castle/08_deleting_resources/","title":"Deleting Resources","text":""},{"location":"OpenShift%20Castle/08_deleting_resources/#objective","title":"Objective","text":"<p>Master the art of deleting resources within the confines of the Openshift castle, ensuring cleanliness and efficiency in your digital domains.</p>"},{"location":"OpenShift%20Castle/08_deleting_resources/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of resource deletion and management, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and Kubernetes concepts.</li> </ul>"},{"location":"OpenShift%20Castle/08_deleting_resources/#introduction","title":"Introduction","text":"<p>As we navigate the corridors of the Openshift castle, we encounter the necessity of resource deletion. Here, amidst the constant ebb and flow of digital entities, lies the art of tidying and organization.</p>"},{"location":"OpenShift%20Castle/08_deleting_resources/#deleting-resources_1","title":"Deleting Resources","text":"<p>Resources within the castle can be removed with the <code>delete</code> command, wielded with precision and care: <pre><code>oc delete pod my-app [options]\n</code></pre> Options abound to tailor the deletion process to your specific needs:</p> <ul> <li><code>-l &lt;key:value&gt;</code>: Selects resources based on the inserted label key:value.</li> <li><code>-f &lt;file_path&gt;</code>: Deletes resources specified in a file, providing the full path for accuracy.</li> <li><code>--grace-period=</code>: Specifies the seconds before a pod is forcibly terminated.</li> <li><code>--now</code>: Sets the grace period to 1 second, immediately shutting down the pod.</li> <li><code>--force</code>: Forcibly deletes the pod, overriding any constraints.</li> <li><code>--all</code>: Deletes all pods within a project, ensuring a clean slate for future endeavors.</li> </ul>"},{"location":"OpenShift%20Castle/08_deleting_resources/#full-project-deletion","title":"Full Project Deletion","text":"<p>For larger-scale deletions, entire projects and their associated resources can be removed with a single command: <pre><code>oc delete project &lt;project_name&gt;\n</code></pre></p> <p>Embark on this journey of resource management, as we wield the power of deletion within the hallowed halls of the Openshift castles.</p>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/","title":"The CRI-O Container Engine","text":""},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#objective","title":"Objective","text":"<p>Uncover the secrets of the CRI-O container engine, gaining mastery over container management.</p>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of discovery and enlightenment, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#introduction","title":"Introduction","text":"<p>As we traverse the labyrinthine corridors of the Openshift castle, we encounter the enigmatic presence of the CRI-O container engine. Here, amidst the whispers of arcane incantations, lies the key to unlocking the power of containerization.</p>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#exploring-the-cri-o-container-engine","title":"Exploring the CRI-O Container Engine","text":""},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#silent-guardian-of-containerized-realms","title":"Silent Guardian of Containerized Realms","text":"<p>CRI-O stands as the silent guardian of containerized realms, offering a command-line interface to manage containers with the mystical crictl command.</p>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#mystical-commands-at-your-disposal","title":"Mystical Commands at Your Disposal","text":"<p>Behold the commands bestowed upon the wielder of this arcane tool:</p> <ul> <li><code>crictl pods</code>: Explore the pods within the containerized domain.</li> <li><code>crictl image</code>: Delve into the images that fuel the containerized realms.</li> <li><code>crictl inspect</code>: Unveil the secrets hidden within the containers.</li> <li><code>crictl exec</code>: Execute commands within containers, wielding the power of containerized magic.</li> <li><code>crictl logs</code>: Retrieve the logs that chronicle the activities within the mystical containers.</li> <li><code>crictl ps</code>: Witness the presence of containers, revealing their existence within the ethereal plane.</li> </ul>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#mastery-through-authority","title":"Mastery Through Authority","text":"<p>To wield these commands with precision and mastery, one must possess the authority of a cluster administrator, guiding the containerized realms with wisdom and foresight.</p>"},{"location":"OpenShift%20Castle/09_cri-o_container_engine/#journey-deeper-into-the-realms","title":"Journey Deeper into the Realms","text":"<p>With crictl as your guide, journey deeper into the realms of containerization, obtaining the very essence of container IDs and delving into the depths of container exploration with commands like <code>lnsn</code> and <code>nsenter</code>.</p> <ul> <li> <p><code>lnsn</code>: This command enables you to obtain the container ID, a mystical identifier that serves as the key to unlock deeper insights into containerized realms.</p> </li> <li> <p><code>nsenter</code>: With this command, adventurers can transcend the boundaries of ordinary perception, entering into the mystical realms of containers. By invoking nsenter, one gains access to the inner workings of containers, allowing for exploration and manipulation beyond the confines of conventional reality.</p> </li> </ul> <p>Embark on this journey of discovery, as we unravel the secrets of the CRI-O container engine within the mystical confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/10_oc_images/","title":"OC Images","text":""},{"location":"OpenShift%20Castle/10_oc_images/#objective","title":"Objective","text":"<p>Manage container images with the <code>oc image</code> command.</p>"},{"location":"OpenShift%20Castle/10_oc_images/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of exploration and enlightenment, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/10_oc_images/#introduction","title":"Introduction","text":"<p>As we navigate the intricate pathways of the Openshift castle, we encounter the realm of container images, governed by the mystical <code>oc image</code> command. Here, amidst the shimmering data streams, lies the essence of containerization waiting to be unveiled.</p>"},{"location":"OpenShift%20Castle/10_oc_images/#exploring-oc-images","title":"Exploring OC Images","text":""},{"location":"OpenShift%20Castle/10_oc_images/#commanding-the-digital-realms","title":"Commanding the Digital Realms","text":"<p>The <code>oc image</code> command serves as the wielder's tool to inspect, configure, and retrieve information about container images within the castle's domain.</p>"},{"location":"OpenShift%20Castle/10_oc_images/#mystical-options-at-your-command","title":"Mystical Options at Your Command","text":"<p>Behold the commands bestowed upon the keeper of this arcane tool:</p> <ul> <li><code>oc image info</code>: Gather insights into the properties and configurations of container images. Utilize options like <code>--filter-by-os</code> to manage specific types of images, e.g.:     <pre><code>oc image info docker.io/ibmcom/ibm-cloud-databases-redis-catalog --filter-by-os amd64\n</code></pre></li> </ul> <p>More powers can be:</p> <ul> <li> <p><code>oc image append</code>: Add layers to container images, empowering them with additional capabilities before pushing them to a registry.</p> </li> <li> <p><code>oc image extract</code>: Retrieve or copy files from container images to a local disk, without the need to run the image as a container.</p> </li> <li> <p><code>oc image mirror</code>: Facilitate the copying or mirroring of container images between different registries or repositories, enabling seamless transfers and management.</p> </li> </ul>"},{"location":"OpenShift%20Castle/10_oc_images/#journey-deeper-into-the-digital-realms","title":"Journey Deeper into the Digital Realms","text":"<p>With <code>oc image</code> as your guide, embark on a journey deeper into the digital realms of containerization, unlocking the hidden potential within container images and harnessing their power for your endeavors within the castle.</p> <p>Embark on this journey of discovery, as we unravel the mysteries of OC Images within the enchanted confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/","title":"CLI Troubleshooting Tools","text":""},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/#objective","title":"Objective","text":"<p>Master the art of troubleshooting within the mystical confines of the Openshift castle, wielding the power of command-line tools with finesse and precision.</p>"},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of troubleshooting and enlightenment, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/#introduction","title":"Introduction","text":"<p>As we venture deeper into the labyrinthine corridors of the Openshift castle, we encounter the necessity of troubleshooting. Here, amidst the swirling mists of uncertainty, lies the arsenal of command-line tools waiting to be wielded in the pursuit of resolution.</p>"},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/#cli-troubleshooting-tools_1","title":"CLI Troubleshooting Tools","text":""},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/#commanding-the-ether","title":"Commanding the Ether","text":"<p>In the ethereal realm of command-line tools, troubleshooters wield an array of mystical commands to unveil the secrets hidden within the castle's digital domains:</p> <ul> <li><code>kubectl describe</code>: Delve into the detailed descriptions of resources, unraveling the intricacies of their configurations and states.</li> <li><code>kubectl edit</code>: Modify resource configurations directly from the command line, shaping the very essence of the digital realms.</li> <li><code>kubectl patch</code>: Apply changes to resource configurations using JSON or YAML patches, altering their properties with surgical precision.</li> <li><code>kubectl replace</code>: Replace existing resources with updated configurations, seamlessly transitioning them into new states.</li> <li><code>kubectl cp</code>: Transfer files and directories to and from containers, facilitating the exchange of knowledge and wisdom.</li> <li><code>kubectl exec</code>: Execute commands within containers, peering into their inner workings and retrieving valuable insights.</li> <li><code>kubectl explain</code>: Gain enlightenment on resource types and their fields, understanding their purpose and significance within the castle's architecture.</li> <li><code>kubectl port-forward</code>: Forge connections to containers, establishing pathways for communication and interaction.</li> </ul>"},{"location":"OpenShift%20Castle/11_cli_troubleshooting_tools/#openshift-specific-commands","title":"Openshift-Specific Commands","text":"<p>Within the enchanted confines of the Openshift castle, troubleshooters harness additional commands to navigate its unique landscapes:</p> <ul> <li><code>oc status</code>: Display the status of containers within the selected namespace, providing insights into their health and vitality.</li> <li><code>oc rsync</code>: Synchronize files and directories to and from containers, harmonizing the flow of information within the castle's realms.</li> <li><code>oc rsh</code>: Initiate remote shells within specified containers, traversing the boundaries of ordinary perception to explore their depths.</li> </ul> <p>Embark on this journey of troubleshooting, as we command the ether and unravel the mysteries concealed within the enchanted confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/12_editing_resources/","title":"Editing Resources","text":""},{"location":"OpenShift%20Castle/12_editing_resources/#objective","title":"Objective","text":"<p>Learn the art of editing resources within the mystical confines of the Openshift castle, wielding the power to shape and mold configurations with finesse.</p>"},{"location":"OpenShift%20Castle/12_editing_resources/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of editing and transformation, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/12_editing_resources/#introduction","title":"Introduction","text":"<p>As we delve deeper into the enchanted realms of the Openshift castle, the need to make changes to resources arises. Here, amidst the flux of digital energies, lies the ability to edit configurations and orchestrate transformations.</p>"},{"location":"OpenShift%20Castle/12_editing_resources/#editing-resources_1","title":"Editing Resources","text":""},{"location":"OpenShift%20Castle/12_editing_resources/#direct-manipulation-of-configurations","title":"Direct Manipulation of Configurations","text":"<p>After the initial phase of inspection and data gathering, troubleshooters can directly test and apply changes to running containers using commands like <code>oc edit</code> and <code>oc patch</code>:</p> <ul> <li><code>oc edit</code>: Open the resource configuration in an editor, allowing for direct modification of parameters and settings.</li> <li><code>oc patch</code>: Apply changes to resource configurations using JSON or YAML patches, enabling precise alterations with surgical precision.</li> </ul>"},{"location":"OpenShift%20Castle/12_editing_resources/#example-usage","title":"Example Usage","text":"<pre><code>oc edit pod my-app-pod\n\noc patch pod valid-pod --type='json' \\\n-p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \\\n\"value\":\"docker.io/my-new-image:latest\"}]'\n</code></pre>"},{"location":"OpenShift%20Castle/12_editing_resources/#port-forwarding-for-investigation","title":"Port Forwarding for Investigation","text":"<p>For temporary port forwarding to expose connectivity to a pod for investigation purposes, troubleshooters can utilize the <code>oc port-forward</code> command:</p> <ul> <li><code>oc port-forward &lt;RESOURCE&gt; &lt;EXTERNAL_PORT:CONTAINER_PORT&gt;</code>: Establish a temporary connection between a local port and a container port, facilitating investigation and analysis.</li> </ul>"},{"location":"OpenShift%20Castle/12_editing_resources/#example-usage_1","title":"Example Usage","text":"<pre><code>oc port-forward nginx-app-ab12c 8080:80\n</code></pre> <p>Embark on this journey of editing and transformation, as we wield the power to shape the digital realms within the enchanted confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/","title":"Copying Files to and from Containers","text":""},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#objective","title":"Objective","text":"<p>Master the art of copying files to and from containers within the mystical confines of the Openshift castle, enabling seamless data exchange between realms.</p>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of file manipulation and synchronization, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#introduction","title":"Introduction","text":"<p>As we navigate the ethereal landscapes of the Openshift castle, the need to exchange files with containers becomes apparent. Here, amidst the shimmering data streams, lies the ability to synchronize files between realms, enabling seamless interaction and data exchange.</p>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#copying-files-to-and-from-containers_1","title":"Copying Files to and from Containers","text":""},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#using-the-oc-cp-command","title":"Using the <code>oc cp</code> Command","text":"<p>To copy files to and from containers using the <code>oc cp</code> command, the <code>tar</code> binary must be present in the container. This command allows troubleshooters to exchange files between local directories and containers with ease:</p> <ul> <li><code>oc cp &lt;SOURCE&gt; &lt;DEST&gt;</code>: Copy files from a running container to a local directory, or from a local directory to a running container.</li> </ul>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#example-usage","title":"Example Usage","text":"<pre><code>oc cp my-app-pod:/opt/app/config.ini /tmp/config.ini\noc cp /tmp/config.ini my-app-pod:/opt/app/\n</code></pre>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#synchronizing-files-with-oc-rsync","title":"Synchronizing Files with <code>oc rsync</code>","text":"<p>For directory synchronization between a local directory and a directory within a container, troubleshooters can utilize the <code>oc rsync</code> command:</p> <ul> <li><code>oc rsync &lt;SOURCE&gt; &lt;DEST&gt;</code>: Synchronize files and directories between a local directory and a directory within a container.</li> </ul>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#example-usage_1","title":"Example Usage","text":"<pre><code>oc rsync my-app-pod:/var/www/ /tmp/web_files\n</code></pre>"},{"location":"OpenShift%20Castle/13_copying_files_to_and_from_containers/#notes","title":"Notes","text":"<ul> <li>When targeting a file path within a pod for either the SOURCE or DEST argument, use the <code>&lt;pod_name&gt;:&lt;path&gt;</code> format, and optionally include the <code>-c &lt;container_name&gt;</code> option for specifying a particular container within a pod.</li> </ul> <p>Embark on this journey of file manipulation and synchronization, as we facilitate seamless data exchange between realms within the enchanted confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/","title":"Container Operations and Monitoring","text":""},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#objective","title":"Objective","text":"<p>Interact with containers. Master the art of executing commands, monitoring events, and accessing logs within containers, enabling efficient container management within the mystical confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of container operations and monitoring, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#introduction","title":"Introduction","text":"<p>As we delve deeper into the enchanted landscapes of the Openshift castle, the need to interact with and monitor containers becomes essential. Here, amidst the swirling energies of digital realms, lies the ability to execute commands, track events, and access logs within containers.</p>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#container-operations-and-monitoring_1","title":"Container Operations and Monitoring","text":""},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#connecting-to-a-running-container","title":"Connecting to a Running Container","text":"<p>To establish a connection to a running container within a pod, troubleshooters can utilize the <code>oc rsh</code> command:</p> <ul> <li><code>oc rsh &lt;POD_NAME&gt;</code>: Connect to the specified running container, enabling direct interaction and execution of commands.</li> </ul>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#example-usage","title":"Example Usage","text":"<pre><code>oc rsh my-app-pod\n</code></pre>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#executing-commands-within-a-container","title":"Executing Commands Within a Container","text":"<p>For executing commands directly within a container, the <code>oc exec</code> command provides a powerful tool:</p> <ul> <li><code>oc exec &lt;POD&gt; | &lt;TYPE/NAME&gt; [-c &lt;container_name&gt;] -- &lt;COMMAND&gt; [&lt;arg1 ... argN&gt;]</code>: Execute the specified command within the container, optionally specifying the container name if multiple containers exist within the pod.</li> </ul>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#example-usage_1","title":"Example Usage","text":"<pre><code>oc exec my-app-pod -- ls /app\n</code></pre>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#viewing-container-logs","title":"Viewing Container Logs","text":"<p>To access the logs generated by a container, troubleshooters can use the <code>oc logs</code> command:</p> <ul> <li><code>oc logs &lt;POD_NAME&gt;</code>: Retrieve and display the logs generated by the specified container.</li> </ul>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#example-usage_2","title":"Example Usage","text":"<pre><code>oc logs my-app-pod\n</code></pre>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#monitoring-container-events","title":"Monitoring Container Events","text":"<p>For monitoring events related to containers within a namespace, troubleshooters can utilize the <code>oc get events</code> command:</p> <ul> <li><code>oc get events</code>: View the events related to containers, providing insights into their lifecycle and status changes.</li> </ul>"},{"location":"OpenShift%20Castle/14_container_operations_and_monitoring/#example-usage_3","title":"Example Usage","text":"<pre><code>oc get events\n</code></pre> <p>Embark on this journey of container operations and monitoring, as we master the art of efficient container management within the enchanted confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/15_resource_management/","title":"Command Line Resources Management","text":""},{"location":"OpenShift%20Castle/15_resource_management/#objective","title":"Objective","text":"<p>Master the art of managing resources through command-line interfaces within the mystical confines of the Openshift castle, enabling efficient resource creation and configuration.</p>"},{"location":"OpenShift%20Castle/15_resource_management/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of command-line resources management, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic familiarity with command-line interfaces (CLI) and container concepts.</li> </ul>"},{"location":"OpenShift%20Castle/15_resource_management/#introduction","title":"Introduction","text":"<p>Welcome, traveler, to the wondrous realms of the Openshift castle, where digital landscapes intertwine with mystical energies. As we navigate the labyrinthine corridors of this ancient stronghold, we discover the need to manage resources with precision and efficiency. Here, amidst the ever-changing vistas of digital realms, lies the power of command-line tools to shape and mold the fabric of existence itself.</p>"},{"location":"OpenShift%20Castle/15_resource_management/#command-line-resources-management_1","title":"Command Line Resources Management","text":""},{"location":"OpenShift%20Castle/15_resource_management/#imperative-commands-crafting-realms-with-swiftness","title":"Imperative Commands: Crafting Realms with Swiftness","text":"<p>Imperative commands such as <code>create</code>, <code>set</code>, and <code>run</code> serve as the swift hand of creation within the castle's halls. They offer a rapid means of crafting pods and other resources, bypassing the need for intricate object definitions. Like skilled artisans, troubleshooters wield these commands to forge new realms with speed and agility.</p>"},{"location":"OpenShift%20Castle/15_resource_management/#example-usage","title":"Example Usage","text":"<pre><code>oc run example-pod \\\n--image=docker.io/library/busybox \\\n--restart=Never \\\n-- echo \"Hello, world!\"\n</code></pre>"},{"location":"OpenShift%20Castle/15_resource_management/#declarative-commands-weaving-threads-of-intention","title":"Declarative Commands: Weaving Threads of Intention","text":"<p>Declarative commands beckon troubleshooters to weave threads of intention into the fabric of the digital tapestry. Through YAML files or templates, they define the desired state of resources, allowing for precise configuration and management. Within these commands lies the power to manifest visions into reality, shaping the very essence of the castle's domains.</p>"},{"location":"OpenShift%20Castle/15_resource_management/#example-usage_1","title":"Example Usage","text":"<pre><code>oc new-app --template hello-world \\\n--param MESSAGE=\"Hello, world!\"\n</code></pre>"},{"location":"OpenShift%20Castle/15_resource_management/#workload-resources-crafting-grand-designs","title":"Workload Resources: Crafting Grand Designs","text":"<p>Workload resources such as Jobs, Deployments, and StatefulSets represent the grand designs within the castle's architecture. With commands like <code>oc create job</code>, troubleshooters breathe life into these constructs, imbuing them with purpose and function. Through these commands, they orchestrate the movements of digital legions, fulfilling the castle's ever-changing needs.</p>"},{"location":"OpenShift%20Castle/15_resource_management/#example-usage_2","title":"Example Usage","text":"<pre><code>oc create job hello-job \\\n--image=docker.io/library/busybox \\\n-- /bin/echo \"Hello, world!\"\n</code></pre> <p>Embark on this grand journey of command-line resources management, as we navigate the enchanted pathways of creation and configuration within the mystical confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/16_k8s_networking/","title":"Kubernetes Networking","text":""},{"location":"OpenShift%20Castle/16_k8s_networking/#objective","title":"Objective","text":"<p>Learn the intricacies of networking within the mystical realms of Openshift.</p>"},{"location":"OpenShift%20Castle/16_k8s_networking/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of Kubernetes networking, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic understanding of Kubernetes concepts and command-line interfaces (CLI).</li> </ul>"},{"location":"OpenShift%20Castle/16_k8s_networking/#introduction","title":"Introduction","text":"<p>Welcome, traveler, to the ethereal realm of Kubernetes networking within the enchanted confines of the Openshift castle. Here, amidst the swirling energies of digital landscapes, lies the essence of seamless communication and load balancing among pods and services. Join us as we unravel the mysteries of Kubernetes networking and delve into the inner workings of the OpenShift Cluster Network Operator.</p>"},{"location":"OpenShift%20Castle/16_k8s_networking/#kubernetes-networking_1","title":"Kubernetes Networking","text":""},{"location":"OpenShift%20Castle/16_k8s_networking/#services-anchors-in-the-digital-seas","title":"Services: Anchors in the Digital Seas","text":"<p>In Kubernetes, services serve as anchors in the vast digital seas, providing permanent, static IP addresses for groups of pods belonging to the same deployment or replica set. These services offer load balancing for client requests among member pods, ensuring resilience and reliability within the castle's domains.</p>"},{"location":"OpenShift%20Castle/16_k8s_networking/#creating-services-with-oc-expose","title":"Creating Services with <code>oc expose</code>","text":"<p>To create a service in Openshift, troubleshooters can utilize the <code>oc expose</code> command, specifying parameters such as selector, port, target port, and protocol:</p> <pre><code>oc expose deployment/&lt;deployment-name&gt; [--selector &lt;selector&gt;] [--port &lt;port&gt;] [--target-port &lt;target port&gt;] [--protocol &lt;protocol&gt;] [--name &lt;name&gt;]\n</code></pre>"},{"location":"OpenShift%20Castle/16_k8s_networking/#viewing-service-endpoints","title":"Viewing Service Endpoints","text":"<p>To view the endpoints associated with a service, troubleshooters can use the <code>oc get endpoints</code> command, gaining insights into the connectivity and reachability of pods within the cluster.</p>"},{"location":"OpenShift%20Castle/16_k8s_networking/#internal-dns-resolution","title":"Internal DNS Resolution","text":"<p>Kubernetes employs an internal DNS server, visible only to pods, which assigns DNS names to defined services. These DNS names follow a specific format:</p> <pre><code>SVC-NAME.PROJECT-NAME.svc.CLUSTER-DOMAIN\n</code></pre>"},{"location":"OpenShift%20Castle/16_k8s_networking/#the-openshift-cluster-network-operator","title":"The OpenShift Cluster Network Operator","text":"<p>The OpenShift Cluster Network Operator (CNO) configures network settings within the Openshift cluster, ensuring seamless integration with Container Network Interface (CNI) plugins. As a cluster administrator, troubleshooters can observe the status of the CNO using commands like <code>oc get</code> and <code>oc describe</code>.</p>"},{"location":"OpenShift%20Castle/16_k8s_networking/#example-usage","title":"Example Usage","text":"<pre><code>oc get -n openshift-network-operator deployment/network-operator\noc describe network.config/cluster\n</code></pre> <p>Embark on this grand journey of Kubernetes networking, as we navigate the digital seas and unravel the mysteries of connectivity and communication within the enchanted confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/","title":"Routes for External Connectivity","text":""},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#objective","title":"Objective","text":"<p>Learn how to expose applications to external networks in the mystical realms of Openshift through routes.</p>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of routes for external connectivity, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic understanding of Openshift concepts and command-line interfaces (CLI).</li> </ul>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#introduction","title":"Introduction","text":"<p>Welcome, adventurer, to the realm of routes for external connectivity within the enchanted confines of Openshift. Here, amidst the shifting currents of digital networks, lies the key to exposing applications to the outside world. Join us as we unravel the mysteries of routes and learn how to pave pathways for external access to your applications.</p>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#routes-for-external-connectivity_1","title":"Routes for External Connectivity","text":""},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#exposing-applications-to-the-outside-world","title":"Exposing Applications to the Outside World","text":"<p>In Openshift, routes provide a means to expose applications to external networks, allowing them to be accessed with unique hostnames that are publicly accessible. Routes rely on Kubernetes ingress controllers to redirect traffic from public IP addresses to pods, offering additional features such as TLS re-encryption, TLS passthrough, and support for blue-green deployments.</p>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#creating-routes-with-oc-expose","title":"Creating Routes with <code>oc expose</code>","text":"<p>To create a route in Openshift, troubleshooters can utilize the <code>oc expose</code> command, specifying parameters such as hostname and service:</p> <p><pre><code>oc expose service &lt;service-name&gt; --hostname &lt;hostname&gt;\n</code></pre> e.g.: <pre><code>oc expose service nginx --hostname castle-of-dreams.example.com\n</code></pre></p> <p>If the hostname is omitted, Openshift generates a hostname with the following structure: <code>&lt;route-name&gt;-&lt;project-name&gt;.&lt;default-domain&gt;</code></p>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#minimal-route-definition","title":"Minimal Route Definition","text":"<p>A minimal definition for a route typically includes the following:</p> <p><pre><code>kind: Route\napiVersion: route.openshift.io/v1\nmetadata:\n  name: &lt;route-name&gt;\nspec:\n  host: &lt;hostname&gt;\n  to:\n    kind: Service\n    name: &lt;service-name&gt;\n  port:\n    targetPort: &lt;target-port&gt;\n</code></pre> e.g.: <pre><code>kind: Route\napiVersion: route.openshift.io/v1\nmetadata:\n  name: castle-of-dreams-route\nspec:\n  host: castle-of-dreams.example.com\n  to:\n    kind: Service\n    name: nginx\n  port:\n    targetPort: 80\n</code></pre></p>"},{"location":"OpenShift%20Castle/17_routes_external_connectivity/#deleting-routes","title":"Deleting Routes","text":"<p>To delete a route in Openshift, troubleshooters can use the following command:</p> <p><pre><code>oc delete route &lt;route-name&gt;\n</code></pre> e.g.: <pre><code>oc delete route castle-of-dreams-route\n</code></pre></p> <p>Embark on this journey of routes for external connectivity, as we pave pathways for accessing applications from the outside world within the mystical confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/18_sticky_sessions/","title":"Sticky Sessions","text":""},{"location":"OpenShift%20Castle/18_sticky_sessions/#objective","title":"Objective","text":"<p>Learn how to configure sticky sessions in the mystical realms of Openshift to maintain session persistence for user requests.</p>"},{"location":"OpenShift%20Castle/18_sticky_sessions/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of sticky sessions, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic understanding of Openshift concepts and command-line interfaces (CLI).</li> </ul>"},{"location":"OpenShift%20Castle/18_sticky_sessions/#introduction","title":"Introduction","text":"<p>Welcome, traveler, to the realm of sticky sessions within the enchanted confines of Openshift. Here, amidst the ebb and flow of digital traffic, lies the art of maintaining session persistence for user requests. Join us as we delve into the mysteries of sticky sessions and learn how to configure them to ensure seamless user experiences.</p>"},{"location":"OpenShift%20Castle/18_sticky_sessions/#sticky-sessions_1","title":"Sticky Sessions","text":""},{"location":"OpenShift%20Castle/18_sticky_sessions/#configuring-session-persistence","title":"Configuring Session Persistence","text":"<p>RHOCP utilizes cookies to configure session persistence for ingress and route resources. The ingress controller selects an endpoint to handle user requests and creates a cookie for the session. This cookie is then passed back in response to the request, allowing the ingress controller to route subsequent requests to the same pod, ensuring session continuity.</p>"},{"location":"OpenShift%20Castle/18_sticky_sessions/#overwriting-default-cookie-name","title":"Overwriting Default Cookie Name","text":"<p>By default, RHOCP auto-generates the cookie name for ingress and route resources. However, troubleshooters can overwrite this default cookie name using the <code>annotate</code> command with either <code>kubectl</code> or <code>oc</code>. </p>"},{"location":"OpenShift%20Castle/18_sticky_sessions/#example-usage","title":"Example Usage","text":"<pre><code>oc annotate ingress ingr-example ingress.kubernetes.io/affinity=cookie\noc annotate route route-example router.openshift.io/cookie_name=myapp\nROUTE_NAME=$(oc get route &lt;route_name&gt; -o jsonpath='{.spec.host}')\ncurl $ROUTE_NAME -k -c /tmp/cookie_jar\n</code></pre> <p>The cookie is passed back in response to the request and is saved to the <code>/tmp/cookie_jar</code> directory.</p> <p>Embark on this journey of sticky sessions, as we configure session persistence to ensure uninterrupted user experiences within the mystical confines of the Openshift castle.</p>"},{"location":"OpenShift%20Castle/19_scaling/","title":"Scale Application","text":""},{"location":"OpenShift%20Castle/19_scaling/#objective","title":"Objective","text":"<p>Learn how to scale applications in the mystical realms of Openshift to meet varying workload demands.</p>"},{"location":"OpenShift%20Castle/19_scaling/#prerequisites","title":"Prerequisites","text":"<p>To embark on this journey of scaling applications, you'll need:</p> <ul> <li>Access to an Openshift cluster or a terminal emulator connected to one.</li> <li>Basic understanding of Openshift concepts and command-line interfaces (CLI).</li> </ul>"},{"location":"OpenShift%20Castle/19_scaling/#introduction","title":"Introduction","text":"<p>Welcome, valiant protector, to the realm of scaling the fortress within the enchanted confines of Openshift. Just as a fortress must adapt its defenses to withstand the onslaught of adversaries, so too must your applications be scaled to meet the ever-changing demands of your digital realm. Join us as we explore the methods of fortification and learn how to adapt to the shifting landscapes of workload demands.</p>"},{"location":"OpenShift%20Castle/19_scaling/#scaling-the-fortress","title":"Scaling the Fortress","text":""},{"location":"OpenShift%20Castle/19_scaling/#manually-adjusting-replicas-rallying-the-troops","title":"Manually Adjusting Replicas: Rallying the Troops","text":"<p>In Openshift, troubleshooters can manually adjust the number of replicas for a deployment to scale the fortress up or down according to the intensity of the siege. This enables them to efficiently allocate resources and maintain performance under varying circumstances.</p>"},{"location":"OpenShift%20Castle/19_scaling/#example-usage","title":"Example Usage","text":"<pre><code>oc scale --replicas 5 deployment/fortress\n</code></pre> <p>Embark on this journey of scaling the fortress, as we wield the power to adapt and fortify our defenses within the ever-changing landscapes of Openshift.</p>"}]}