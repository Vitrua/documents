{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guides","text":"<p>Welcome! You've discovered the Guides section!</p> <p>Here, you'll embark on a journey through the magical realm of tutorials. Explore and uncover the secrets of this enchanted domain!</p> <p>Or go back to our Homepage</p>"},{"location":"#vitruatop","title":"vitrua.top","text":""},{"location":"Kubernetes%20Dungeon/01_Pods/","title":"The dragon Pod","text":""},{"location":"Kubernetes%20Dungeon/01_Pods/#storytime","title":"Storytime","text":"<p>In the mystical realm of Vitrua, there dwelled a revered scientist whose companion was a venerable dragon in the twilight of its existence. Determined to extend the dragon's waning years, the scientist delved into the arcane arts of longevity. Initially, he succeeded in encapsulating the essence of the dragon within a mesmerizing image, a tapestry of intricate layers. However, it was only when this image was ensconced within a container, a mystical orb, that true transformation occurred, imbuing the dragon with a vitality beyond its natural state.</p> <p>The dragon was still sad, as it had troubles interacting with the external world from it's container, so the scientist had to find a solution to facilitate the dragon's interaction with the world outside its confines. Through relentless experimentation, he devised a remarkable exoskeleton using a deceptively simple engineering blueprint:</p>"},{"location":"Kubernetes%20Dungeon/01_Pods/#pod-basic-yaml","title":"Pod basic yaml","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: dragon-pod\n  labels:\n    type: dragon-app\nspec:\n  containers:\n  - name: dragon-container\n    image: dragon-image:latest\n    ports:\n    - containerPort: 443\n      protocol: TCP\n</code></pre>"},{"location":"Kubernetes%20Dungeon/01_Pods/#components-explanation","title":"Components explanation","text":"<p>The scientist has made quite the simple but effective blueprint. Let's break down the YAML structure:</p> <ol> <li> <p><code>apiVersion: v1</code>: This line specifies the API version being used to ensure compatibility with the cluster, which in this case is version 1 of the Kubernetes API. It's analogous to specifying the version of a software application.</p> </li> <li> <p><code>kind: Pod</code>: Here, a Kubernetes Pod is being defined. A Pod is the smallest deployable unit in Kubernetes, representing a single instance of a running process. This Pod likely encapsulates the environment for the dragon's consciousness and interaction.</p> </li> <li> <p><code>metadata</code>: This section provides metadata about the Pod, including its name and labels.</p> <ul> <li> <p><code>name: dragon-pod</code>: This line specifies the name of the Pod, which is \"dragon-pod\". This name is how Kubernetes will refer to and manage this specific instance of the Pod.</p> </li> <li> <p><code>labels</code>: Labels are key-value pairs used to organize and select subsets of objects in Kubernetes. Here, the Pod is labeled with <code>type: dragon-app</code>, indicating that it belongs to a category of applications related to dragons.</p> </li> </ul> </li> <li> <p><code>spec</code>: This section specifies the desired state for the Pod, including its containers and their configuration.</p> <ul> <li> <p><code>containers</code>: This subsection defines the containers that should be launched within the Pod.</p> <ul> <li> <p><code>name: dragon-container</code>: This line assigns a name to the container within the Pod. In this case, it's named \"dragon-container\", representing the vessel for the dragon's consciousness.</p> </li> <li> <p><code>image: dragon-image:latest</code>: Here, the image for the container is specified. The container will be created using the Docker image named \"dragon-image\" with the tag \"latest\". This image likely contains the necessary software and environment for the dragon's consciousness to operate within the container.</p> </li> <li> <p><code>ports</code>: This subsection specifies the ports that should be exposed by the container.</p> <ul> <li> <p><code>- containerPort: 443</code>: This line indicates that the container should expose port 443, which is commonly used for HTTPS traffic. In the story, this port might be used for communication or interaction between the dragon and external systems.</p> </li> <li> <p><code>protocol: TCP</code>: This line specifies the protocol to be used for communication on the exposed port. In this case, it's TCP (Transmission Control Protocol), a common protocol used for reliable communication over networks.</p> </li> </ul> </li> </ul> </li> </ul> </li> </ol> <p>Overall, this YAML file describes the configuration for a Kubernetes Pod named \"dragon-pod\", which contains a single container named \"dragon-container\" running the \"dragon-image\" Docker image. The container exposes port 443 for TCP communication, likely facilitating interactions between the dragon's consciousness and external systems in the Land of Vitrua.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/","title":"Services: ClusterIp, NodePort, LoadBalancer, ExternalName","text":""},{"location":"Kubernetes%20Dungeon/02_Services/#story-time","title":"Story time","text":"<p>Once upon a time, three intrepid souls roamed the land: Brave Ben, Resourceful Rina, and Fearless Fred. One fateful day, they set their sights on the legendary Cluster Castle, a fabled dungeon rumored to conceal secrets of immense power and knowledge.</p> <p>Approaching the castle's entrance, they resolved to compete in their quest for the coveted treasures within. Each determined to claim the prized bounty first.</p> <p>As they ventured forth, they diverged onto separate paths, destined for an unexpected encounter with the mystical guardians: ClusterIP, NodePort, LoadBalancer, and ExternalName.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#clusterip","title":"ClusterIP","text":"<p>Brave Ben, opting for a solitary journey into the depths, utilized his teleportation magic to navigate the labyrinthine tunnels. Amidst the maze, he encountered ClusterIP, a spectral guide. This entity ensured seamless communication within the dungeon's confines, shielding him from external interference. The aid of ClusterIP was akin to possessing an exclusive map of the tunnels, accessible only to those within its bounds.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#nodeport","title":"NodePort","text":"<p>Meanwhile, Resourceful Rina circled the castle walls until she stumbled upon a concealed door. Upon entering, she was greeted by NodePort, the stalwart guardian. NodePort facilitated external access to specific chambers within the dungeon, acting as a direct bridge between the interior and the outside world. It served as a key to unlock designated areas, granting entry to predetermined zones.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#loadbalancer","title":"LoadBalancer","text":"<p>Finally Fearless Fred decided to boldly march through the main entrance, confronting a massive gate guarded by the imposing LoadBalancer. This formidable gatekeeper permitted numerous adventurers to access the dungeon's chambers. The LoadBalancer represented the necessity for a broader entry point, providing an accessible map to guide all who sought exploration within.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#externalname","title":"ExternalName","text":"<p>In the shadows, a lesser-known sorcerer, ExternalName, watched over a hidden passage leading to a realm beyond the dungeon's confines. This sorcerer acted as a conduit to an external service, allowing adventurers to access resources located outside the dungeon's domain. ExternalName served as a gateway to distant lands, offering a glimpse into worlds beyond imagination.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#conclusion","title":"Conclusion","text":"<p>Though taking different routes, ClusterIP, NodePort, LoadBalancer, and ExternalName guided the adventurers through the Cluster Castle, each ensuring access to its treasures while safeguarding its secrets with their protective measures. The four adventurers all emerged victorious, and returned laden with newfound knowledge and riches.</p>"},{"location":"Kubernetes%20Dungeon/02_Services/#exercise-managing-kubernetes-services-clusterip-nodeport-loadbalancer-and-externalname","title":"Exercise: Managing Kubernetes Services - ClusterIP, NodePort, LoadBalancer, and ExternalName","text":"<p>Objective: The objective of this exercise is to gain hands-on experience in managing different types of Kubernetes services: ClusterIP, NodePort, LoadBalancer, and ExternalName.</p> <p>Requirements: - Access to a Kubernetes cluster (locally installed or cloud-based) - kubectl command-line tool installed and configured to communicate with the Kubernetes cluster</p> <p>Instructions: 1. Create a ClusterIP Service:     - Use either a YAML configuration file or the command line to create a ClusterIP service to connect an app to a port.</p> <ol> <li> <p>Create a NodePort Service:</p> <ul> <li>Define a NodePort service to connect an app to a port, allowing external access by specifying a node port.</li> </ul> </li> <li> <p>Create a Basic LoadBalancer Service:</p> <ul> <li>Establish a basic LoadBalancer service to connect an app to a port.</li> </ul> </li> <li> <p>Create an ExternalName Service:</p> <ul> <li>Set up an ExternalName service to map a service to a DNS name.</li> </ul> </li> <li> <p>Confirm Service Creation:</p> <ul> <li>Verify that the services have been created correctly.</li> </ul> </li> <li> <p>Edit a Service:</p> <ul> <li>Modify or add a port, or link to a different element in at least one of the services.</li> </ul> </li> <li> <p>Clean Up Resources:</p> <ul> <li>Remove resources once the exercise is completed to prevent unnecessary costs or cluttering of the Kubernetes cluster.</li> </ul> </li> </ol> <p>Example Solution Steps:</p> <p>Assuming you have a Kubernetes cluster set up and a sample application deployed named \"my-app\":</p> <ol> <li> <p>Create ClusterIP Service: <pre><code>kubectl create service clusterip my-app-clusterip --tcp=80:8080\n</code></pre></p> </li> <li> <p>Create NodePort Service: <pre><code>kubectl create service nodeport my-app-nodeport --tcp=80:8080 --node-port=30000\n</code></pre></p> </li> <li> <p>Create LoadBalancer Service: <pre><code>kubectl create service loadbalancer my-app-loadbalancer --tcp=80:8080\n</code></pre></p> </li> <li> <p>Create ExternalName Service: <pre><code>kubectl create service externalname my-app-external --external-name=example.com\n</code></pre></p> </li> <li> <p>Verify Service Creation: <pre><code>kubectl get services\n</code></pre></p> </li> <li> <p>Edit a Service: <pre><code>kubectl edit svc my-app-clusterip\n</code></pre></p> </li> <li> <p>Clean Up Resources: <pre><code>kubectl delete service my-app-clusterip my-app-nodeport my-app-loadbalancer my-app-external\n</code></pre></p> </li> </ol> <p>These steps should provide a hands-on experience in managing various types of Kubernetes services and familiarize you with their configurations and functionalities.</p> <p>To get a full insight of the services, their characteristics and yaml files configuration, you can find here the full official documentation. </p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/","title":"Git Basic Workflow","text":"<p>Once upon a time in the enchanted land of Vitrua, there lived a wizard named Wizzle. Wizzle was not your ordinary wizard; he was part of an order of fellow wizards and sorcerers who shared all their spells through a big cauldron. One day, Wizzle got an idea to upgrade the Fire spell, and he extracted a magical paper named <code>fire.spell</code> from the cauldron. </p> <pre><code>git clone https://github.com/vitrua/spellbook\n</code></pre> <p>Inscribed on the paper was the spell to conjure flames - a simple yet powerful \"Fire\" spell. Wizzle was excited to make it even more powerful.</p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/#the-spellcasting-ritual","title":"The Spellcasting Ritual:","text":"<ol> <li> <p>Create a New Branch - Fireball:</p> <ul> <li>Wizzle opened his enchanted terminal and invoked the Git spell to create a new branch named \"ball\":  <pre><code>git branch ball\n</code></pre></li> <li>With a flick of his wand, he switched to the \"fireball\" branch:  <pre><code>git checkout ball\n</code></pre></li> </ul> </li> <li> <p>Update the Spell - Fireball:</p> <ul> <li>Wizzle opened the magical <code>fire.spell</code> paper using his text-editor visualization spell.</li> <li>He modified the incantation from <code>Fire</code> to <code>Fireball</code>, bringing the new spell to life.</li> <li>Wizzle added the updated spell to the magical Git cauldron. <pre><code>git add fire.spell\n</code></pre></li> <li>With a wave of his hand, he committed the changes, letting the other wizards know what you can do with the new spell:  <pre><code>git commit -m \"Cast Fireball spell\"\n</code></pre></li> </ul> </li> <li> <p>Merge the Fireball Magic:</p> <ul> <li>Satisfied with the powerful Fireball spell, Wizzle decided to merge it into the main spellbook. He switched back to the main branch:  <pre><code>git checkout main\n</code></pre></li> <li>He merged the Fireball magic into the main spellbook:  <pre><code>git merge fireball\n</code></pre></li> </ul> </li> </ol> <p>The Grand Finale:</p> <p>With a sense of accomplishment, Wizzle pushed the updated main spellbook to the magical cauldron:  <pre><code>git push origin main\n</code></pre> His fellow wizards and sorcerers, connected through the magical network, marveled at the newfound powers of the Fireball spell.</p> <p>And so, in the land of Vitrua, Wizzle the Spellcaster continued to weave his magical Git commands, creating powerful spells and enchantments for the entire magical community.</p>"},{"location":"Misc%20Magic/01_Git_Basic_workflow/#magical-git-commands-summary","title":"Magical Git Commands Summary:","text":"<ul> <li><code>git branch &lt;branch_name&gt;</code>: Create a new branch.</li> <li><code>git checkout &lt;branch_name&gt;</code>: Switch to a branch.</li> <li><code>sed -i 's/Fire/Fireball/' fire.spell</code>: Update spell text.</li> <li><code>git add fire.spell</code>: Add changes to the staging area.</li> <li><code>git commit -m \"Commit message\"</code>: Commit changes.</li> <li><code>git merge &lt;branch_name&gt;</code>: Merge changes from another branch.</li> <li><code>git push origin &lt;branch_name&gt;</code>: Push changes to a remote repository.</li> </ul> <p>And so, the tale of Wizzle the Git Spellcaster goes down in the magical scrolls of Vitrua, inspiring wizards and developers alike to wield the power of Git for enchanting collaborative creations.</p>"},{"location":"Misc%20Magic/02_Cow_Fortune/","title":"Cow Fortune","text":""},{"location":"Misc%20Magic/02_Cow_Fortune/#storytime","title":"Storytime","text":"<p>Fortune-teller cow wasn't known for her milk production,</p> <p>but for her uncanny ability to see the future. </p> <p>Farmers flocked to her pasture, eagerly awaiting a swish of her tail </p> <p>(left meant sunshine, right meant rain). </p>"},{"location":"Misc%20Magic/02_Cow_Fortune/#objective","title":"Objective","text":"<p>Transform your mundane bash terminal into a whimsical oracle of fortunes with the mystical insights of the Fortune-teller Cow. Each time you open your terminal, be greeted by a prophetic message delivered by the wise bovine seer.</p>"},{"location":"Misc%20Magic/02_Cow_Fortune/#install","title":"Install","text":"<ol> <li> <p>Install fortune and cowsay</p> <p>First, you need to ensure that both <code>fortune</code> and <code>cowsay</code> are installed on your system. You can do this using your package manager. For example, on Ubuntu or Debian-based systems, you can use <code>apt</code>:</p> <pre><code>sudo apt update\nsudo apt install fortune cowsay\n</code></pre> <p>For other Linux distributions, you might use <code>yum</code>, <code>dnf</code>, or another package manager appropriate to your system.</p> </li> <li> <p>Modify your .bashrc file</p> <p>Once you have <code>fortune</code> and <code>cowsay</code> installed, you can modify your <code>.bashrc</code> file to display a random fortune each time you open a new terminal window or tab.</p> <p>Open your <code>.bashrc</code> file in a text editor. You can do this with the following command:</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>Scroll to the bottom of the file, and add the following lines:</p> <pre><code># Display a random fortune with cowsay when opening a new terminal\nif [ -x /usr/games/cowsay -a -x /usr/games/fortune ]; then\n  fortune | cowsay\nfi\n</code></pre> <p>Save the file by pressing <code>Ctrl + O</code>, then press <code>Enter</code> to confirm, and exit Nano by pressing <code>Ctrl + X</code>.</p> </li> <li> <p>Test it out</p> <p>Open a new terminal window or tab, and you should see a random fortune displayed in a speech bubble created by a cow! Each time you open a new terminal, you'll see a different fortune.</p> </li> </ol> <p>That's it! You've successfully installed <code>fortune</code> and <code>cowsay</code> on your Bash shell and configured it to display a random fortune each time you open a new terminal session.</p>"},{"location":"OSpace/01_Basic_Linux/","title":"Penguin in Outer Space: Basic Linux Workflow","text":""},{"location":"OSpace/01_Basic_Linux/#introduction","title":"Introduction","text":"<p>Meet Pulsar Penguin, the brave astronaut quietly floating in his spaceship in outer space. As he taps with his fins on the control panel keyboard, his spacecraft is suddenly damaged by a small meteor. Trained to stay calm in such situations, he begins to navigate through the dire scenario.</p>"},{"location":"OSpace/01_Basic_Linux/#prerequisites","title":"Prerequisites","text":"<p>To follow along, you'll need:</p> <ul> <li>Access to a Linux-based system or terminal emulator.</li> </ul>"},{"location":"OSpace/01_Basic_Linux/#pulsars-directories","title":"Pulsar's Directories","text":"<pre><code>engine\n\u251c\u2500\u2500\u2500mounted\n\u2502   \u251c\u2500\u2500\u2500propeller.broken.part\n\u2502   \u2514\u2500\u2500\u2500jet.part\n\u2514\u2500\u2500\u2500spare\n    \u251c\u2500\u2500\u2500jet.new.part\n    \u2514\u2500\u2500\u2500propeller.new.part\n</code></pre>"},{"location":"OSpace/01_Basic_Linux/#linux-commands-in-action","title":"Linux Commands in Action","text":""},{"location":"OSpace/01_Basic_Linux/#navigating-and-managing-files","title":"Navigating and Managing Files","text":"<ul> <li> <p>Calmly, Pulsar begins repair operations by determining his current location with the 'print working directory' command:   <pre><code>pwd\n</code></pre></p> </li> <li> <p>Discovering he's in the /engine directory, he confirms its contents with the 'list' command:   <pre><code>ls\n</code></pre></p> </li> <li> <p>Hearing strange noises from the 'mounted' directory, he investigates further using the 'change directory' command:   <pre><code>cd mounted\n</code></pre></p> </li> <li> <p>He finds a broken file, 'propeller.broken.part', and swiftly creates a new directory using 'make directory' to store parts temporarily:   <pre><code>mkdir temporary\n</code></pre></p> </li> <li> <p>Returning to the 'engine' level:   <pre><code>cd ..\n</code></pre></p> </li> <li> <p>He easily makes a 'copy' of the spare part:   <pre><code>cp spare/propeller.new.part mounted/propeller.new.part\n</code></pre></p> </li> <li> <p>Revisiting the 'mounted' components, he renames the new part while 'moving' it:   <pre><code>mv propeller.new.part propeller.part\n</code></pre></p> </li> <li> <p>After completing the repairs, he cleans up the debris by 'removing' unnecessary files:   <pre><code>rm propeller.broken.part\nrm -r temporary\n</code></pre></p> </li> </ul>"},{"location":"OSpace/01_Basic_Linux/#system-management","title":"System Management","text":"<ul> <li> <p>Facing a moment of panic when the new part doesn't work due to incorrect permissions, Pulsar temporarily grants full access using the 'change mode' command:   <pre><code>chmod -R 777 /engine/mounted\n</code></pre></p> </li> <li> <p>Encountering an error, he elevates his privileges using the 'super user do' command:   <pre><code>sudo chmod -R 777 /engine/mounted\n</code></pre></p> </li> </ul>"},{"location":"OSpace/01_Basic_Linux/#communication-and-troubleshooting","title":"Communication and Troubleshooting","text":"<ul> <li> <p>With the spaceship stabilized, Pulsar performs a final check to ensure all parts are accounted for using 'global regular expression print':   <pre><code>grep part\n</code></pre></p> </li> <li> <p>Before resuming his journey, he consults the manual one last time:   <pre><code>man pwd\n</code></pre></p> </li> </ul>"},{"location":"OSpace/01_Basic_Linux/#linux-survival-summary","title":"Linux Survival Summary:","text":"<ul> <li><code>pwd</code>: Get the path to the current working directory.</li> <li><code>ls</code>: List directory contents. <code>ls -lah</code> for more information.</li> <li><code>cd &lt;directory_name&gt;</code>: Change directory. <code>cd ..</code> to go back to a higher level.</li> <li><code>mkdir &lt;directory_name&gt;</code>: Create a new directory.</li> <li><code>cp &lt;path_original_file&gt; &lt;path_destination_file&gt;</code>: Copy a file.</li> <li><code>mv &lt;path_original_file&gt; &lt;path_destination_file&gt;</code>: Move a file.</li> <li><code>rm &lt;file_path&gt;</code>: Remove a file. <code>rm -rf &lt;directory_path&gt;</code>: Remove a directory and everything inside it forcefully.</li> <li><code>chmod &lt;permissions&gt; &lt;file_name&gt;</code>: Manage permissions.</li> <li><code>sudo &lt;command&gt;</code>: Execute a command as a superuser (root).</li> <li><code>grep &lt;pattern&gt; &lt;file_name&gt;</code>: Search for a pattern in files.</li> </ul>"},{"location":"OSpace/01_Basic_Linux/#conclusion","title":"Conclusion","text":"<p>Pulsar's journey demonstrates how mastering basic Linux commands can be crucial in critical situations. By familiarizing yourself with these commands, you too can navigate through the complexities of Linux systems with confidence and resilience.</p>"}]}